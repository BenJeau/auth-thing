{
  "openapi": "3.1.0",
  "info": {
    "title": "Auth Thing REST API",
    "description": "A [Axum](https://github.com/tokio-rs/axum) Rust based API REST endpoints for the Auth Thing system interfacing with SQLite via [sqlx](https://github.com/launchbadge/sqlx). This documentation is generated using [utoipa](https://github.com/juhaku/utoipa).\n\n## How to use\n\nSelect a tag (category) to reveal information about the endpoints and select an endpoint to test them. To query the API, you'll need to authenticate yourself with one of the methods below or by clicking on any of the locks.\n\n## Authentication\n\nAll endpoints are protected except for auth endpoints. You either need to authenticate with one of the following ways all within the `Authorization` request header:\n1. provide a JWT as a bearer token - `Bearer JWT_TOKEN`\n2. provide username + password as basic authentication - `Basic base64(username:password)` _(**Note**: You also need to supply the `X-Auth-Realm` followed by the application ID due to the multi-tenant structure)_\n3. provide a API token as token authentication - `Token API_TOKEN`\n\nOnly the documentation `/api/v1/docs`, the authentication `/api/v1/auth`, and `/api/v1/health` endpoints are not protected.\n\n## Clients\n\nThere's no official API client yet, but thanks to the OpenAPI documentation, you can generate your own HTTP client using something like [OpenAPI Generator](https://openapi-generator.tech/) with the JSON from the OpenAPI docs located at `/api/v1/docs/openapi.json`. The frontend's API client is generated using [OpenAPI TS](https://openapi-ts.dev/) which has Tanstack Query bindings!",
    "contact": {
      "name": "Beno√Æt Jeaurond",
      "email": "benoit@jeaurond.dev"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/license/MIT"
    },
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "/api/v1"
    }
  ],
  "paths": {
    "/applications": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get all applications",
        "operationId": "get_applications",
        "responses": {
          "200": {
            "description": "List matching applications by query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Application"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Create a new application",
        "operationId": "create_application",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyApplication"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Application created successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/applications/{id}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get application by database ID",
        "operationId": "get_application",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application database ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get application by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "404": {
            "description": "Application was not found"
          }
        }
      },
      "put": {
        "tags": [
          "Applications"
        ],
        "summary": "Update an application",
        "operationId": "update_application",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyApplication"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Application updated successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Application was not updated"
          }
        }
      },
      "delete": {
        "tags": [
          "Applications"
        ],
        "summary": "Delete an application",
        "operationId": "delete_application",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application database ID",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Application deleted successfully"
          },
          "404": {
            "description": "Application not found"
          }
        }
      }
    },
    "/applications/{id}/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get roles for application",
        "operationId": "get_application_roles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application database ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List matching roles by query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Create a new role",
        "operationId": "create_role",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application database ID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyRole"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Role created successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/applications/{slug}/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login to authenticate and generate a new JWT",
        "operationId": "login",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "description": "Application slug",
            "required": true
          }
        ],
        "requestBody": {
          "description": "User information needed to authenticate a user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginUserResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/applications/{slug}/signup": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Signup to create a new user",
        "operationId": "signup",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "description": "Application slug",
            "required": true
          }
        ],
        "requestBody": {
          "description": "User information needed to create new user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User created successfully"
          }
        }
      }
    },
    "/auth/applications/{slug}/verify/email": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Verify email",
        "operationId": "verify_email",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "description": "Application slug",
            "required": true
          },
          {
            "name": "token",
            "in": "query",
            "description": "Verification token",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyEmailResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/applications/{slug}/verify/email/resend": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Resend email verification code",
        "operationId": "resend_verification_code",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "description": "Application slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "User already verified"
          },
          "429": {
            "description": "Too many requests - must wait before requesting new code"
          },
          "500": {
            "description": "Email service not configured"
          }
        }
      }
    },
    "/auth/applications/{slug}/verify/otp": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Verify a one-time password (OTP) for two-factor authentication",
        "operationId": "verify_otp",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "description": "Application slug",
            "required": true
          },
          {
            "name": "otp",
            "in": "query",
            "description": "One-time password to verify",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OTP verification successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyOtpResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid OTP provided"
          },
          "403": {
            "description": "2FA is not enabled for this user"
          },
          "404": {
            "description": "TOTP secret not found for user"
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Verifies if the backend is healthy and it's related services",
        "operationId": "health",
        "responses": {
          "200": {
            "description": "Backend is healthy"
          }
        }
      }
    },
    "/providers": {
      "get": {
        "tags": [
          "Providers"
        ],
        "summary": "Get all providers",
        "operationId": "get_providers",
        "responses": {
          "200": {
            "description": "List matching providers by query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Provider"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Providers"
        ],
        "summary": "Create a new provider",
        "operationId": "create_provider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyProvider"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Provider created successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/providers/{id}": {
      "get": {
        "tags": [
          "Providers"
        ],
        "summary": "Get prodiver by database ID",
        "operationId": "get_provider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Provider database ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get provider by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provider"
                }
              }
            }
          },
          "404": {
            "description": "Provider was not found"
          }
        }
      },
      "put": {
        "tags": [
          "Providers"
        ],
        "summary": "Update a provider",
        "operationId": "update_provider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyProvider"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Provider updated successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Provider was not updated"
          }
        }
      },
      "delete": {
        "tags": [
          "Providers"
        ],
        "summary": "Delete a provider",
        "operationId": "delete_provider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Provider database ID",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Provider deleted successfully"
          },
          "404": {
            "description": "Provider not found"
          }
        }
      }
    },
    "/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get all roles",
        "operationId": "get_roles",
        "responses": {
          "200": {
            "description": "List matching roles by query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/roles/{id}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get role by database ID",
        "operationId": "get_role",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Role database ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get role by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "404": {
            "description": "Role was not found"
          }
        }
      },
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "Update a role",
        "operationId": "update_role",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Role database ID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyRole"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Role updated successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Role was not updated"
          }
        }
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Delete a role",
        "operationId": "delete_role",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Role database ID",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Role deleted successfully"
          },
          "404": {
            "description": "Role not found"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users",
        "operationId": "get_users",
        "responses": {
          "200": {
            "description": "List matching users by query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by database ID",
        "operationId": "get_user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User database ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Get user by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User was not found"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user",
        "operationId": "update_user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "User was not updated"
          }
        }
      }
    },
    "/users/{id}/roles": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user roles",
        "operationId": "get_user_roles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User database ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List matching user roles by query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/roles/{id}": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Assign a role to a user",
        "operationId": "assign_user_role",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User database ID",
            "required": true
          },
          {
            "name": "role_id",
            "in": "path",
            "description": "Role database ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Role assigned successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Role doesn't exist"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Remove a role from a user",
        "operationId": "remove_user_role",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User database ID",
            "required": true
          },
          {
            "name": "role_id",
            "in": "path",
            "description": "Role database ID",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Role removed successfully"
          },
          "404": {
            "description": "Role doesn't exist"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Application": {
        "type": "object",
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "creatorId",
          "slug",
          "name",
          "passwordAuth",
          "passwordMinLength",
          "passwordRequiresLowercase",
          "passwordRequiresUppercase",
          "passwordRequiresNumber",
          "passwordRequiresSpecial",
          "passwordRequiresUnique",
          "passwordRequiresNonCommon",
          "verificationRequired"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "creatorId": {
            "type": "integer",
            "format": "int64"
          },
          "slug": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "website": {
            "type": [
              "string",
              "null"
            ]
          },
          "icon": {
            "type": [
              "string",
              "null"
            ]
          },
          "passwordAuth": {
            "type": "boolean"
          },
          "passwordMinLength": {
            "type": "integer",
            "format": "int64"
          },
          "passwordMaxLength": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "passwordRequiresLowercase": {
            "type": "boolean"
          },
          "passwordRequiresUppercase": {
            "type": "boolean"
          },
          "passwordRequiresNumber": {
            "type": "boolean"
          },
          "passwordRequiresSpecial": {
            "type": "boolean"
          },
          "passwordRequiresUnique": {
            "type": "boolean"
          },
          "passwordRequiresNonCommon": {
            "type": "boolean"
          },
          "verificationRequired": {
            "type": "boolean"
          },
          "verificationMethod": {
            "type": [
              "string",
              "null"
            ]
          },
          "verificationCode": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "LoginUserRequest": {
        "type": "object",
        "description": "Data needed to login a user",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the user to authenticate"
          },
          "password": {
            "type": "string",
            "description": "The password of the user to authenticate"
          }
        }
      },
      "LoginUserResponse": {
        "type": "object",
        "description": "Response from login request",
        "required": [
          "jwtToken"
        ],
        "properties": {
          "jwtToken": {
            "type": "string",
            "description": "The JWT token created from login request that can be used to authenticate yourself"
          }
        }
      },
      "ModifyApplication": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "website": {
            "type": [
              "string",
              "null"
            ]
          },
          "icon": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "ModifyProvider": {
        "type": "object",
        "required": [
          "name",
          "kind",
          "client_id",
          "client_secret",
          "redirect_uri"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          }
        }
      },
      "ModifyRole": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "ModifyUser": {
        "type": "object",
        "description": "Fields to modify a user",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "Email of the user"
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Full name of the user"
          },
          "username": {
            "type": [
              "string",
              "null"
            ],
            "description": "Username of the user"
          },
          "picture": {
            "type": [
              "string",
              "null"
            ],
            "description": "Picture of the user"
          },
          "disabled": {
            "type": "boolean",
            "description": "Whether the user is enabled or not, if they are able to login/access the platform"
          }
        }
      },
      "Provider": {
        "type": "object",
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "name",
          "kind",
          "clientId",
          "clientSecret",
          "redirectUri"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          },
          "redirectUri": {
            "type": "string"
          }
        }
      },
      "Role": {
        "type": "object",
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "creatorId",
          "applicationId",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "creatorId": {
            "type": "integer",
            "format": "int64"
          },
          "applicationId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "SignupUserRequest": {
        "type": "object",
        "description": "Data needed to signup/create a new user",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The name of the user to authenticate"
          },
          "username": {
            "type": [
              "string",
              "null"
            ],
            "description": "The username of the user to authenticate"
          },
          "email": {
            "type": "string",
            "description": "The email of the user to authenticate"
          },
          "password": {
            "type": "string",
            "description": "The password of the user to authenticate"
          }
        }
      },
      "SuccessResponse": {
        "type": "object",
        "required": [
          "success"
        ],
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "User": {
        "type": "object",
        "description": "A user of the platform",
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "email",
          "disabled",
          "emailVerified",
          "twoFactorEnabled"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Database ID of the user"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the user was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the user was updated"
          },
          "email": {
            "type": "string",
            "description": "Email of the user"
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "Full name of the user"
          },
          "username": {
            "type": [
              "string",
              "null"
            ],
            "description": "Username of the user"
          },
          "picture": {
            "type": [
              "string",
              "null"
            ],
            "description": "Picture of the user"
          },
          "disabled": {
            "type": "boolean",
            "description": "Whether the user is enabled or not, if they are able to login/access the platform"
          },
          "preferredLocale": {
            "type": [
              "string",
              "null"
            ],
            "description": "Language and general location (locale) of the user"
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Whether the user has verified their email address"
          },
          "twoFactorEnabled": {
            "type": "boolean",
            "description": "Whether two-factor authentication is enabled for this user"
          },
          "verificationCodeCreatedAt": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Time when the verification code was created"
          }
        }
      },
      "VerifyEmailResponse": {
        "type": "object",
        "required": [
          "success"
        ],
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "VerifyOtpResponse": {
        "type": "object",
        "required": [
          "success"
        ],
        "properties": {
          "success": {
            "type": "boolean"
          },
          "redirect": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Applications",
      "description": "Application management"
    },
    {
      "name": "Health",
      "description": "Overall health check for the service"
    },
    {
      "name": "Providers",
      "description": "Authentication provider management"
    },
    {
      "name": "Roles",
      "description": "Role management"
    },
    {
      "name": "Users",
      "description": "User management"
    }
  ]
}